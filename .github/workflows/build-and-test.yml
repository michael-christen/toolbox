name: Build and Test
run-name: ${{ github.actor }} is building and testing ${{ github.repository }}
on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - master
jobs:
  build_and_test:
    runs-on: ubuntu-22.04
    steps:
      - run: echo "The job was triggered by a ${{ github.event_name }} event, running on ${{ runner.os }}, ${{ github.ref }} @ ${{ github.repository }}."
      - name: Check Disk Usage
        if: always()
        # echo "Disk usage by directory (sorted by size):"
        # du -h / --max-depth=1 2>/dev/null | sort -hr | head -n 20
        # sudo du /usr/ -hx -d 4 --threshold=1G | sort -hr | head
        run: |
          df -h
      - uses: actions/checkout@v4
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          # Data on sizes from this run on 2025-04-25:
          # https://github.com/michael-christen/toolbox/actions/runs/14666765877/job/41163363493
          # 8.21 GB
          android: true
          # 1.6 GB
          dotnet: true
          # 6.2 GB
          haskell: true
          # 4.9 GB
          # But ... It takes about 120s to clean, so setting false
          large-packages: false
          # 2.5 GB
          docker-images: true
          # 4.0 GB
          swap-storage: true
      - name: Check Disk Usage
        if: always()
        run: |
          df -h
      - uses: ./.github/actions/bazel-setup
        with:
          buildbuddy_api_key: ${{ secrets.BUILDBUDDY_API_KEY }}
      - name: Install Lint Pre-requisites
        run: |
          # Needed for clang-format / llvm_toolchain, otherwise libtinfo.so.5
          # is not found
          sudo apt-get install -y libncurses5
      - name: Check Disk Usage
        if: always()
        run: |
          df -h
      - name: Lint
        run: |
          ./lint.sh --mode check
      - name: Check Disk Usage
        if: always()
        run: |
          df -h
      - name: Build
        run: |
          bazel build //...
      - name: Check Disk Usage
        if: always()
        run: |
          df -h
      - name: Test
        run: |
          bazel test //... --output_groups=-mypy
          # Food for thought:
          # - Should we test in addition / segregate some?
          # - Should we test in different modes (-c opt / -c dbg)?
          # - Should we add instrumentation_filter to .bazelrc to reduce
          # analysis cache thrashing?
          # Could leave the above to buildbuddy ...
      - name: Check Disk Usage
        if: always()
        run: |
          df -h
      - name: Coverage
        run: |
          # Avoid enormous tests; can find them with: `bazel query 'attr(size, enormous, //...)'`
          bazel coverage //... --combined_report=lcov --instrument_test_targets --instrumentation_filter="^//" --test_size_filters=-enormous --output_groups=-mypy
      - name: Check Disk Usage
        if: always()
        run: |
          df -h
      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1
      - name: Coverage Report Generation
        run: |
          # Generate baseline
          bazel run tools:coverage_baseline -- --root_dir `pwd` > baseline_coverage.dat
          # Remove external/ sources: https://manpages.debian.org/unstable/lcov/lcov.1.en.html
          lcov --remove "$(bazel info output_path)/_coverage/_coverage_report.dat" 'external*' -o most_coverage.dat
          # Combine with baseline
          lcov -a baseline_coverage.dat -a most_coverage.dat -o coverage.dat
          # Show Table
          lcov --list coverage.dat
          # Generate HTML
          genhtml --legend --highlight --branch-coverage --output genhtml coverage.dat
      # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/storing-workflow-data-as-artifacts
      - name: Archive coverage.dat
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.dat
      - name: Archive genhtml
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-html
          path: genhtml
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.dat
      - run: echo "Status is ${{ job.status }}."
