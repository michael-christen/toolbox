# Use bzlmod
common --enable_bzlmod

# https://github.com/aspect-build/gcc-toolchain/issues/161
build --noincompatible_sandbox_hermetic_tmp

# Prevent python use of ~/.local/lib
build --action_env=PYTHONNOUSERSITE=1
build --test_env=PYTHONNOUSERSITE=1

# Remote Cache: https://app.nativelink.com/c690e34c-beac-420a-b672-6320b8f5b419/quickstart
# XXX: Taking a while
# build --remote_cache=grpcs://cas-michael-christen.build-faster.nativelink.net
# build --remote_header=x-nativelink-api-key=66f9052f8b6613865377d05b5202334eb9a5bb702e64270381c202f6e9ae4072
# build --bes_backend=grpcs://bes-michael-christen.build-faster.nativelink.net
# build --bes_header=x-nativelink-api-key=66f9052f8b6613865377d05b5202334eb9a5bb702e64270381c202f6e9ae4072
# build --remote_timeout=600

# C Compiler Options: https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html

# All Warnings and then some, mark em as errors too
build --copt -Wall
# -Wextra, with a few exceptions
build --copt -Wmemset-transposed-args
build --copt -Wcast-function-type
build --copt -Wclobbered
build --copt -Wempty-body
build --conlyopt -Wenum-conversion
build --copt -Wexpansion-to-defined
build --copt -Wignored-qualifiers
# TODO(https://github.com/michael-christen/toolbox/issues/42): Re-enable
# NOTE: zlib was the cause of requiring this
# build --copt -Wimplicit-fallthrough=3
build --copt -Wmaybe-uninitialized
build --copt -Wshift-negative-value
build --copt -Wsign-compare
build --copt -Wstring-compare
build --copt -Wtype-limits
build --copt -Wuninitialized
build --copt -Wunused-but-set-parameter
build --conlyopt -Wabsolute-value
build --conlyopt -Wmissing-parameter-type
build --conlyopt -Wold-style-declaration
build --conlyopt -Woverride-init
build --cxxopt -Wsized-deallocation
build --cxxopt -Wdeprecated-copy
# Unrecognized
# build --copt -Walloc-size
# com_google_protobuf does these:
# build --copt -Wmissing-field-initializers
# build --copt -Wredundant-move
# build --copt -Wunused-parameter

# Warnings are errors
build --copt -Werror

# Colored output
build --copt -fdiagnostics-color=always

# Let's use the latest and greatest we can
build --cxxopt='-std=c++20' --host_cxxopt='-std=c++20'
# NOTE: Can also specify --linkopt

# Only build tests when testing
test --build_tests_only

# View failed test output
test --test_output=errors

# Allow silent builds with --config=quiet
build:quiet --ui_event_filters=-info,-stdout,-stderr
build:quiet --noshow_progress

# Allow user to extend .bazelrc
try-import %workspace%/user.bazelrc

# TODO(https://github.com/michael-christen/toolbox/issues/28): stop interference with rules_rust
# # https://github.com/aspect-build/gcc-toolchain/issues/85
# build --incompatible_enable_cc_toolchain_resolution
# build --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
# # Performance per #85
# build --experimental_reuse_sandbox_directories
# # Have rules_rust use the right hermetic toolchain sysroot, symlink folders
# # into execution directory
# build --@rules_rust//cargo/settings:experimental_symlink_execroot=True

# Must match PYTHON_VERSION in MODULE.bazel
# LINK(7e463bc3_e4d9_4464_ba39_3217c4a86004)
common --@aspect_rules_py//py:interpreter_version=3.11.9

# Standard Bazel configuration flags required for all Pigweed projects.

# Don't automatically create __init__.py files.
#
# This prevents spurious package name collisions at import time, and should be
# the default (https://github.com/bazelbuild/bazel/issues/7386). It's
# particularly helpful for Pigweed, because we have many potential package name
# collisions due to a profusion of stuttering paths like
# pw_transfer/py/pw_transfer.
common --incompatible_default_to_explicit_init_py

# Required for new toolchain resolution API.
build --incompatible_enable_cc_toolchain_resolution

# Do not attempt to configure an autodetected (local) toolchain. We vendor all
# our toolchains, and CI VMs may not have any local toolchain to detect.
common --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1

# Don't propagate flags or defines to the exec config. This will become the
# default one day (https://github.com/bazelbuild/bazel/issues/22457) and will
# improve cache hit rates between builds targeting different platforms.
# XXX: common --experimental_exclude_defines_from_exec_config
# XXX: common --experimental_exclude_starlark_flags_from_exec_config

# Enforces consistent action environment variables. This is important to
# address Protobuf's rebuild sensitivity on changes to the environment
# variables. It also improves cache hit rates. Should be true by default one
# day (https://github.com/bazelbuild/bazel/issues/7026).
build --incompatible_strict_action_env

# Expose exec toolchains for Python. We use these toolchains in some rule
# implementations (git grep for
# "@rules_python//python:exec_tools_toolchain_type").
build --@rules_python//python/config_settings:exec_tools_toolchain=enabled
