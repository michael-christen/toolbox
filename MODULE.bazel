# Update via
# bazel mod deps --lockfile_mode=update
# --lockfile_mode=refresh refreshes mutable fields
# Test via
# bazel mod deps --lockfile_mode=error
#
# See https://bazel.build/external/lockfile for more info
module(
    name = "mchristen",
    version = "",
)

########################################
# Generic deps
########################################
bazel_dep(name = "aspect_bazel_lib", version = "2.5.1")
bazel_dep(name = "platforms", version = "0.0.9")

########################################
# Set up rules_python and pip
########################################
bazel_dep(name = "aspect_rules_py", version = "0.7.3")

# Minimum version needs:
# feat: add interpreter_version_info to py_runtime by @mattem in #1671
bazel_dep(name = "rules_python", version = "0.29.0", dev_dependency = True)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# Must match interpreter_version in .bazelrc
# LINK(7e463bc3_e4d9_4464_ba39_3217c4a86004)
PYTHON_VERSION = "3.11"

python.toolchain(
    configure_coverage_tool = True,
    python_version = PYTHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "pip")

bazel_dep(name = "protobuf", version = "26.0")
bazel_dep(name = "rules_rust", version = "0.48.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.lock",
    manifests = [
        "//:examples/basic/Cargo.toml",
    ],
)
use_repo(crate, "crate_index")

########################################
# Set up rules_oci
########################################
bazel_dep(name = "rules_oci", version = "1.7.4")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base",
    # 'latest' is not reproducible, but it's convenient.
    # During the build we print a WARNING message that includes recommended 'digest' and 'platforms'
    # values which you can use here in place of 'tag' to pin for reproducibility.
    # tag = "latest",
    digest = "sha256:9d4e5680d67c984ac9c957f66405de25634012e2d5d6dc396c4bdd2ba6ae569f",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
oci.pull(
    name = "ubuntu_base",
    # tag = "24.04",
    digest = "sha256:723ad8033f109978f8c7e6421ee684efb624eb5b9251b70c6788fdb2405d050b",
    image = "ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)

# For each oci.pull call, repeat the "name" here to expose them as dependencies.
use_repo(oci, "distroless_base", "ubuntu_base")

########################################
# Set up hermetic Buildifier tools
########################################
# This is helpful because the old version used an http_archive to fetch the buildtools
# WORKSPACE, but it is incompatible with bzlmod Go toolchains. Instead let's just use
# a prebuilt version.
bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

########################################
# Set up rules_js
########################################
# NOTE: We don't really use/support JS in this repo, and if you need to you'll
# have some more config to do, but we register rules_js here so we can use it to
# pull a few javascript packages used for repo tooling, like prettier for linting.
bazel_dep(name = "aspect_rules_js", version = "1.39.0")

####### OPTIONAL: Customize Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
# bazel_dep(name = "rules_nodejs", version = "5.8.2")
# node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
# node.toolchain(node_version = "16.14.2")
#################################

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)

npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

use_repo(pnpm, "pnpm")

bazel_dep(name = "rules_multirun", version = "0.9.0")

# Specify to support stackb_rules_proto in bazel 7
bazel_dep(name = "rules_apple", version = "3.7.0", repo_name = "build_bazel_rules_apple")

# Bazel rule helpers, including testing
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.7.1", dev_dependency = True)
